{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "documents = [\n",
    "    {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},\n",
    "    {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},\n",
    "    {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}\n",
    "]\n",
    "directories = {\n",
    "    '1': ['2207 876234', '11-2'],\n",
    "    '2': ['10006'],\n",
    "    '3': []\n",
    "}\n",
    "\n",
    "def menu():\n",
    "    p_command = ''\n",
    "    while (p_command != 'Q'):\n",
    "        p_command = input('type p-people если хотите узнать имя и фамилию по номеру документа\\n'\n",
    "                          'type s-shelf если хотите узнать на какой полке находится документа\\n'\n",
    "                          'type l-list если хотите вывести весь список документов\\n'\n",
    "                          'type as-add shelf если хотите добавить новую полку\\n'\n",
    "                          'type d-delete если хотите удалить документ из каталога и из перечня полок\\n'\n",
    "                          'type m-move если хотите переместить документ на другую полку\\n'\n",
    "                          'type a-add если хотите добавить новый документ\\n'\n",
    "                          'type q-quit если хотите выйти из программы\\n').upper()\n",
    "        if (p_command == 'P'):\n",
    "            number_doc = input('Введите номер документа ')\n",
    "            print(getPersonName(number_doc))\n",
    "        elif (p_command == 'S'):\n",
    "            number_doc = input('Введите номер документа ')\n",
    "            print(ShelfNo(number_doc))\n",
    "        elif (p_command == 'L'):\n",
    "            printDocInfo(documents)\n",
    "        elif (p_command == 'AS'):\n",
    "            number_shelf = input('Введите номер полки ')\n",
    "            print(addShelf(number_shelf))\n",
    "        elif (p_command == 'D'):\n",
    "            number_doc = input('Введите номер документа, который хотите удалить ')\n",
    "            print(delete_doc(number_doc))\n",
    "            print(delete_dir(number_doc))\n",
    "        elif (p_command == 'M'):\n",
    "            number_doc = input('Введите номер документа ')\n",
    "            number_shelf = input('Введите номер полки, на которую хотите переместить документ ')\n",
    "            print(move_doc(number_doc, number_shelf))\n",
    "        elif (p_command == 'A'):\n",
    "            type_doc = input('Введите тип документа ')\n",
    "            number_doc = input('Введите номер документа ')\n",
    "            name = input('Введите имя и фамилию ')\n",
    "            shelf = input('Введите номер полки, где будет храниться документ ')\n",
    "            print(add_newDoc(type_doc, number_doc, name))\n",
    "            print(add_doc(number_doc, shelf))\n",
    "\n",
    "# p – people – команда, которая спросит номер документа и выведет имя человека, которому он принадлежит;\n",
    "def getPersonName(noDoc):\n",
    "    for line in documents:\n",
    "        if noDoc == line['number']:\n",
    "            return line['name']\n",
    "    return ('Данного документа не существует')\n",
    "\n",
    "# s – shelf – команда, которая спросит номер документа и выведет номер полки, на которой он находится\n",
    "def ShelfNo(number_doc):\n",
    "    for row in directories.items():\n",
    "        for element in row[1]:\n",
    "            if number_doc == element:\n",
    "                return row[0]\n",
    "    return 'Данного документа не существует'\n",
    "\n",
    "# l – list – команда, которая выведет список всех документов в формате\n",
    "def printDocInfo(docs):\n",
    "    for line in docs:\n",
    "        print(f'{line[\"type\"]} \"{line[\"number\"]}\" \"{line[\"name\"]}\"')\n",
    "\n",
    "# as – add shelf – команда, которая спросит номер новой полки и добавит ее в перечень. Предусмотрите случай, когда пользователь добавляет полку, которая уже существует.\n",
    "\n",
    "def addShelf(shelf):\n",
    "    c = None\n",
    "    for item in directories:\n",
    "        if shelf == item:\n",
    "            c = 'Данная полка уже существует'\n",
    "            return c\n",
    "    result = directories.setdefault(shelf, [])\n",
    "    return directories\n",
    "\n",
    "#d – delete – команда, которая спросит номер документа и удалит его из каталога и из перечня полок. Предусмотрите сценарий, когда пользователь вводит несуществующий документ;\n",
    "\n",
    "def delete_doc(noDoc):\n",
    "    for row in documents:\n",
    "        if noDoc == list(row.items())[1][1]:\n",
    "            row.clear()\n",
    "            return documents\n",
    "    return 'Данного документа не существует'\n",
    "\n",
    "def delete_dir(noDoc):\n",
    "    for row in directories.items():\n",
    "        for element in row[1]:\n",
    "            if noDoc == element:\n",
    "                result = row[1]\n",
    "                result.remove(noDoc)\n",
    "                return directories\n",
    "    return ' '\n",
    "\n",
    "#m – move – команда, которая спросит номер документа и целевую полку и переместит его с текущей полки на целевую. Корректно обработайте кейсы, когда пользователь пытается переместить несуществующий документ или переместить документ на несуществующую полку;\n",
    "\n",
    "def move_doc(noDoc, shelf):\n",
    "    for row in directories.items():\n",
    "        if shelf not in directories:\n",
    "            return 'Данной полки не существует'\n",
    "        for element in row[1]:\n",
    "            if noDoc == element:\n",
    "                result = row[1]\n",
    "                result.remove(noDoc)\n",
    "                new_list = directories.setdefault(shelf)\n",
    "                new_list.append(noDoc)\n",
    "                return directories\n",
    "        return 'Данного документа не существует'\n",
    "\n",
    "#a – add – команда, которая добавит новый документ в каталог и в перечень полок, спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться. Корректно обработайте ситуацию, когда пользователь будет пытаться добавить документ на несуществующую полку\n",
    "\n",
    "def add_newDoc(type_doc,number_doc, name):\n",
    "    for line in documents:\n",
    "        new_dict = {}\n",
    "        documents.append(new_dict)\n",
    "        new_dict['type'] = type_doc\n",
    "        new_dict['number'] = number_doc\n",
    "        new_dict['name'] = name\n",
    "        return documents\n",
    "\n",
    "def add_doc(number_doc, shelf):\n",
    "    for row in directories.items():\n",
    "        if shelf == row[0]:\n",
    "            row[1].append(number_doc)\n",
    "            return directories\n",
    "    return 'Данной полки не существует'\n",
    "\n",
    "menu()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
